const env = process.env.NODE_ENV || 'development';
const path = require('path');
global.__base = path.join(__dirname, '/');
const envoodoo = require('envoodoo');
const envFile = path.resolve(`./${env}.env`);
const Octopus = require('@usetada/octopus');
const asyncRedis = require("async-redis");
const { executeQueue } = require(__base + 'lib/runner_helpers/functions');

const TOPIC = '{{TopicName}}';
const CHANNEL = `${TOPIC}Channel`;

envoodoo(envFile, async function (e) {
	if (e) throw e;

	const redisClient = asyncRedis.createClient({
		host: process.env.REDIS_HOST,
		port: process.env.REDIS_PORT,
		retry_strategy: function retry(options) {
			
			// Kill runners after retry 10seconds
			if (options.total_retry_time > 2000 * 5) {
				return process.exit(0);
			}

			// Retry every 2 seconds
			return 2000;
		}
	});
	
	redisClient.on("error", function (err) {
		console.log("Redis Error =============>" + err);

		return process.exit(0);
	});

	const runner = require('./runner');
	const octopus = Octopus({
		ENV: process.env.NODE_ENV || 'development',
	});

	const NSQ = octopus.NSQ({
		NSQLookup: [
			`${process.env.NSQ_LOOKUP_HOST_HTTP_1}:${process.env.NSQ_LOOKUP_PORT_HTTP_1}`
		],
		NSQ: [{
			host: process.env.NSQD_HOST_1 || 'localhost',
			port: process.env.NSQD_PORT_1 || 4150
		}]
	});

	await NSQ.InitConnections();

	NSQ.Subscribe({
		topic: TOPIC,
		channel: CHANNEL,
		lookupdPollInterval: 5,
		msgConfig: {
			autofinish: false
		},
		processFn: async (incomingMsg) => {
			if (!incomingMsg.hasResponded) incomingMsg.touch();

			const data = incomingMsg.json();
			console.log('Incoming QueueId #', data._id);

			await executeQueue(runner, NSQ, redisClient, data);

			incomingMsg.finish();
		}
	});
});